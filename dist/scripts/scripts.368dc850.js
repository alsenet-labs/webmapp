"use strict";angular.module("webmappApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngTouch","ui-leaflet"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/Battelle",{templateUrl:"views/battelle.html",controller:"BattelleCtrl",controllerAs:"battelle"}).otherwise({redirectTo:"/Battelle"})}]),proj4.defs("EPSG:2056","+title=LV95 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs"),proj4.defs("LV95","+title=LV95 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs"),proj4.defs("MN95","+title=MN95 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs"),angular.module("webmappApp").controller("MainCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("webmappApp").controller("AboutCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("webmappApp").controller("BattelleCtrl",["$scope","$http","$location","$timeout","notify","leafletData","leafletDrawEvents","$q","beacons",function($scope,$http,$location,$timeout,notify,leafletData,leafletDrawEvents,$q,beacons){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],$timeout(function(){$scope.map=leafletData.getMap(),$scope.map.then(function(map){$scope.map=map})},1e3);var cH=$("#crosshair-h"),cV=$("#crosshair-v");$(document).on("mousemove",function(e){$scope.hairVisible&&!$scope.hairFrozen&&(cH.css("top",e.pageY),cV.css("left",e.pageX))}),$(document).on("keydown",function(e){switch(console.log(e.keyCode),e.keyCode){case 88:$scope.toggleHairFrozen()}}),$scope.center={lng:6,lat:46,zoom:8},$scope.drawnItems=new L.FeatureGroup,angular.extend($scope,{center:{lng:8,lat:47,zoom:8},layers:{},loadLayers:function(url){var scope=this,q=$q.defer();return scope.json?q.resolve():(url=url||"layers/battelle/layers.json",$http.get(url).then(function(res){200!=res.status?(notify.message('Could not load layers from "'+url+'".'),q.reject()):$scope.initLayers(res).then(q.resolve)})),q.promise},initLayers:function(res){function doneOne(){--todo,todo||q.resolve()}var center,pathname=res.config.url.replace(/layers\.json.*/,""),layers={},todo=0;angular.forEach(res.data,function(layer,layerName){++todo});var q=$q.defer();return angular.forEach(res.data,function(layer,layerName){var layerClass;if(layer.baseLayer){if(layerClass="baselayers",!center&&layer.visible){var coords=proj4(layer.projection,"WGS84",layer.center);center={lng:coords[0],lat:coords[1],zoom:void 0!==layer.options.minZoom?Math.floor(layer.options.minZoom+(layer.options.maxZoom-layer.options.minZoom)/3):8}}}else layerClass="overlays";var list=layers[layerClass];list||(list=layers[layerClass]={}),"geoJSONShape"==layer.type?$http.get(pathname+layer.url).then(function(res){list[layerName]={name:layer.description||layerName,type:layer.type,data:res.data,visible:layer.visible||!1,layerParams:layer.options||{}},doneOne()}):(list[layerName]={name:layer.description||layerName,url:pathname+layer.url,type:layer.type,visible:layer.visible||!1,layerParams:layer.options||{}},doneOne())}),q.promise.then(function(){angular.extend($scope,{center:center||$scope.center,layers:layers||$scope.layers})}),q.promise},controls:{scale:{imperial:!1},minimap:{type:"minimap",layer:{name:"OpenStreetMap",url:"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",type:"xyz"},toggleDisplay:!0},custom:[$scope.saveButton=L.easyButton({states:[{title:"Save shapes",icon:"fa-save fa-lg",onClick:function(btn,map){$scope.downloadlink||($scope.downloadLink=document.createElement("a"),$scope.downloadLink.download="battelle-geojson.json");var link=$scope.downloadLink,geojson={type:"FeatureCollection",features:$scope.features};link.href="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(geojson,null,4)),document.body.appendChild(link),link.click(),document.body.removeChild(link),link.remove()}}]}),L.easyButton({states:[{title:"Set beacons coordinates origin",icon:"fa-circle-o -fa-lg",onClick:function(btn,map){return $scope.hairFrozen?(beacons.geolocation.origin=angular.copy($scope.frozenCoords.LV95),void beacons.updateAxis()):void alert("Select a place with the crosshairs, then press X to freeze the crosshairs and click this button to set the origin.")}}]}),L.easyButton({states:[{title:"Set vertical axis from origin",icon:"fa-dot-circle-o -fa-lg",onClick:function(btn,map){return $scope.hairFrozen?(beacons.geolocation.downVector=angular.copy($scope.frozenCoords.LV95),void beacons.updateAxis()):void alert("Select a place with the crosshairs, then press X to freeze the crosshairs and click this button to set the vertical axis (from the origin).")}}]}),L.easyButton({states:[{title:"Toggle crosshair",icon:"fa-crosshairs fa-lg",onClick:function(btn,map){var hair=$(".hair");$scope.hairFrozen=!1,$scope.coordsToDisplay="mouseCoords",hair.is(":visible")?(hair.hide(0),$("#mousecoords").hide(),$scope.hairVisible=!1,$("#lf-battelle").css("cursor","")):(hair.show(0),$("#mousecoords").show(),$scope.hairVisible=!0,$("#lf-battelle").css("cursor","none"))}}]})]},drawOptions:{draw:{polyline:{metric:!1},polygon:{metric:!1,showArea:!0,drawError:{color:"#b00b00",timeout:1e3},shapeOptions:{color:"blue"}},circle:{showArea:!0,metric:!1,shapeOptions:{color:"#662d91"}},marker:!1},edit:{featureGroup:$scope.drawnItems,remove:!0}},drawEventHandlers:{created:function(e,leafletEvent,leafletObject,model,modelName){$scope.drawnItems.addLayer(leafletEvent.layer),$scope.updateObjectList()},edited:function(arg){$scope.updateObjectList()},deleted:function(e,leafletEvent){$scope.drawnItems.removeLayer(leafletEvent.layers),$scope.updateObjectList()},drawstart:function(arg){},drawstop:function(arg){},editstart:function(arg){},editstop:function(arg){},deletestart:function(arg){},deletestop:function(arg){}},updateObjectList:function(){var features=$scope.features=[];console.log($scope.drawnItems._layers),angular.forEach($scope.drawnItems._layers,function(layer){features.push(layer.toGeoJSON())}),$scope.saveButton[features.length?"enable":"disable"]()},events:{map:{enable:["mousemove","mousedown","move","moveend"],logic:"emit"}},mouseCoords:{LV95:[0,0],WGS84:[0,0]},centerCoords:{LV95:[0,0],WGS84:[0,0]},coordsToDisplay:"mouseCoords",coordsProjection:"LV95",getCoordsToDisplay:function(){var scope=this,coords=scope.coordsToDisplay&&scope[scope.coordsToDisplay]&&scope[scope.coordsToDisplay][scope.coordsProjection];return coords?coords[0].toFixed(8)+", "+coords[1].toFixed(8):"not available"},getCenter:function(){var scope=this;if(scope.map){var coords=scope.map.getCenter();scope.centerCoords.WGS84=[coords.lng,coords.lat],scope.centerCoords.LV95=proj4("WGS84","EPSG:2056",[coords.lng,coords.lat])}return scope.centerCoords},getMouseCoords:function(leafletMouseEvent){var scope=this,coords=(leafletMouseEvent||scope.leafletEvent).latlng;return scope.mouseCoords.WGS84=[coords.lng,coords.lat],scope.mouseCoords.LV95=proj4("WGS84","EPSG:2056",[coords.lng,coords.lat]),scope.mouseCoords},setupEventHandlers:function(){var scope=this;scope.$on("leafletDirectiveMap.lf-battelle.mousemove",function(event,args){scope.leafletEvent=args.leafletEvent,scope.getMouseCoords()}),scope.$on("leafletDirectiveMap.lf-battelle.move",function(event,args){scope.getCenter(),scope.hairFrozen&&$scope.toggleHairFrozen()});var drawEvents=leafletDrawEvents.getAvailableEvents();angular.forEach(scope.drawEventHandlers,function(handler,eventName){eventName="draw:"+eventName;var idx=drawEvents.indexOf(eventName);0>idx?console.log("Error: unknown drawEvent "+eventName):drawEvents.splice(idx,1),scope.$on("leafletDirectiveDraw.lf-battelle."+eventName,function(e,payload){var p=payload;handler(e,p.leafletEvent,p.leafletObject,p.model,p.modelName)})}),drawEvents.length&&console.log("warning: no handlers for the following drawEvents:",drawEvents),scope.$on("centerUrlHash",function(event,centerHash){scope.centerHash=centerHash})},toggleHairFrozen:function(){$scope.hairFrozen=!$scope.hairFrozen,$scope.hairFrozen?($("#lf-battelle").css("cursor",""),$scope.frozenCoords=angular.copy($scope[$scope.coordsToDisplay]),$scope._coordsToDisplay=$scope.coordsToDisplay,$scope.coordsToDisplay="frozenCoords"):($("#lf-battelle").css("cursor","none"),$scope.coordsToDisplay=$scope._coordsToDisplay)},labels:{},geojson:{style:{fillColor:"green",weight:2,opacity:1,color:"white",dashArray:"3",fillOpacity:.7},labelOptions:{noHide:!0},_onEachFeature:function(feature,layer){var shortname=feature.properties.description;layer.label||($scope.labels&&$scope.labels[shortname]?layer.label=$scope.labels[shortname]:$scope.labels[shortname]=layer.label=new L.Label({className:"beacon"},layer)),layer.label.setContent(shortname),$scope.labels_visible&&$timeout(function(){layer._showLabel(feature.properties)},1)}},removeExtraLabels:function(features){var shortnames=Object.keys($scope.labels);angular.forEach(features,function(feature){var shortname=feature.properties.description,pos=shortnames.indexOf(shortname);pos>=0&&shortnames.splice(pos,1)}),angular.forEach(shortnames,function(shortname){var label=$scope.labels[shortname];label&&$scope.map.hasLayer(label)&&$scope.map.removeLabel(label)})},init:function(){var q=$q.defer();return $scope.saveButton.disable(),$scope.loadLayers().then(function(){$scope.setupEventHandlers(),q.resolve()},function(err){q.reject(err)}),q.promise}}),$scope.init().then(function(){function iter(){var q=$q.defer();return beacons.find(null,function(err,rows){if(err)return console.log(arguments),q.reject(new Error("Could not get beacons coordinates"));var featureCollection=beacons.toGeoJSON(rows||[]);return q.resolve(featureCollection)}),q.promise}function loop(){iter().then(function(data){$scope.removeExtraLabels(data.features),$scope.geojson.data=data,$timeout(function(){loop()},5e3)},function(err){notify.message(err.message),$timeout(function(){loop()},5e3)})}loop()})}]),angular.module("webmappApp").service("notify",function(){this.message=function(message){$.notify({message:'<span class="fa fa-exclamation-triangle">&nbsp;</span>'+message},{delay:5e3})}}),angular.module("webmappApp").service("beacons",["$http",function($http){function geojson_square_coordinates(center,size){size/=2;var coordinates=[];return angular.forEach([[center[0]-size,center[1]-size],[center[0]+size,center[1]-size],[center[0]+size,center[1]+size],[center[0]-size,center[1]+size],[center[0]-size,center[1]-size]],function(coords){coordinates.push(proj4(beacons.geolocation.proj,"WGS84",coords))}),coordinates}var beacons=this;angular.extend(beacons,{http_origin:document.location.origin,geolocation:{proj:"EPSG:2056",origin:[2499670.90206156,1114753.42399633],downVector:[2499680.14609066,1114764.71805181]},updateAxis:function(){beacons.axis={};var u=beacons.axis.Y=[beacons.geolocation.downVector[0]-beacons.geolocation.origin[0],beacons.geolocation.downVector[1]-beacons.geolocation.origin[1]],norm=Math.sqrt(u[0]*u[0]+u[1]*u[1]);u[0]/=norm,u[1]/=norm;beacons.axis.X=[u[1],-u[0]]},find:function(options,callback){$http({method:"GET",url:beacons.http_origin+"/cassandra/beacons.json"}).then(function(response){console.log(response),callback(null,response.data.rows)},function(response){callback(response.status,response.data.rows)})},toGeoJSON:function(rows){if(!beacons.axis)return{};var u=beacons.axis.X,v=beacons.axis.Y,origin=beacons.geolocation.origin,features=[];return angular.forEach(rows,function(row){var x=Number(row.x),y=Number(row.y),coords=[origin[0]+x*u[0]+y*v[0],origin[1]+x*u[1]+y*v[1]];row.coords=coords;var wgs84=proj4(beacons.geolocation.proj,"WGS84",coords);({lat:wgs84[1],lng:wgs84[0]});features.push({type:"Feature",properties:{description:row.shortname,latlng:{lat:wgs84[1],lng:wgs84[0]}},geometry:{type:"Polygon",coordinates:[geojson_square_coordinates(coords,.5)]}})}),{type:"FeatureCollection",features:features}}}),beacons.updateAxis()}]),angular.module("webmappApp").run(["$templateCache",function($templateCache){$templateCache.put("views/about.html","<p>This is the about view.</p>"),$templateCache.put("views/battelle.html",'<div id="battelle" ng-cloak> <div id="crosshair-h" class="hair"></div> <div id="crosshair-v" class="hair"></div> <leaflet ng-if="layers.overlays" geojson="geojson" id="lf-battelle" lf-center="center" layers="layers" controls lf-draw="drawOptions" event-broadcast="events" url-hash-center="yes" width="100%" height="100%"></leaflet> <div class="wrapper"> <div id="mousecoords" ng-cloak>{{getCoordsToDisplay()}}</div> </div> </div>'),$templateCache.put("views/main.html","")}]);